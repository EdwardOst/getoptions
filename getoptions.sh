# shellcheck shell=sh
getoptions() {
  URL="https://github.com/ko1nksm/getoptions"
  LICENSE="Creative Commons Zero v1.0 Universal (CC0 Public Domain)"
  _error='' _on=1 _off='' _export='' _plus='' _optargs='' _restargs=RESTARGS

  quote() {
    set -- "$1" "$2'" ''
    until [ ! "$2" ] && set -- "$1" "'${3%????}'"; do
      set -- "$1" "${2#*\'}" "$3${2%%\'*}'\''"
    done
    set -- "$1" "${2#\'\'}"
    set -- "$1" "${2%\'\'}"
    eval "[ \"\$2\" ] && $1=\"\$2\" || $1=\'\'"
  }

  code() {
    case $1 in
      :*) [ ! "${4:-}" ] || echo "${2:-}${4:-}" ;;
      *) [ ! "${3:-}" ] || echo "${2:-}${3:-}" ;;
    esac
  }

  setup() {
    while [ $# -gt 0 ] && [ "$1" != '--' ]; do
      eval "_${1%%:*}=\"\${1#*:}\""
      shift
    done
  }
  args() {
    while [ $# -gt 1 ] && [ "$2" != '--' ] && shift; do
      [ "${1#[-+]}" = "$1" ] && eval "${1%%:*}=\"\${1#*:}\""
      [ "${1#+}" = "$1" ] || _plus=1
    done
  }
  init() {
    on="$_on" off="$_off" export="$_export" init=''
    unset init
    args "$@"

    if [ ! ${init+x} ]; then
      code "$1" "" "${export:+export }${1}=''"
    elif [ "$init" = '@unset' ]; then
      code "$1" "" "unset $1 ||:" "unset OPTARG ||:; ${1#:}"
    else
      [ "${init#@}" = "$init" ] || eval "init=\"=\${${init#@}}\""
      [ "${init#=}" = "$init" ] && echo "$init" && return 0
      quote init "${init#=}"
      code "$1" "" "${export:+export }${1}=${init}" "OPTARG=$init; ${1#:}"
    fi
  }
  optarg() {
    while [ $# -gt 1 ] && [ "$2" != '--' ] && shift; do
      [ "${1#-?}" ] || _optargs="${_optargs}${1#-}"
    done
  }
  flag() { init "$@"; }
  param() { init "$@"; optarg "$@"; }
  option() { init "$@"; optarg "$@"; }
  disp() { :; }
  mesg() { :; }

  echo "# Option parser generated by getoptions"
  echo "# URL: $URL"
  echo "# LICENSE: $LICENSE"
  "$@"
  echo "$_restargs=''"

  setup() { :; }
  args() {
    sw='' on="$_on" off="$_off" validate='' counter='' default=''
    while [ $# -gt 1 ] && [ "$2" != '--' ] && shift; do
      case $1 in
        --\{no-\}*) sw="${sw}${sw:+ | }--${1#--?no-?} | --no-${1#--?no-?}" ;;
        [-+]? | --*) sw="${sw}${sw:+ | }$1" ;;
        *) eval "${1%%:*}=\"\${1#*:}\"" ;;
      esac
    done
    echo "      $sw)"
  }
  flag() {
    args "$@"
    [ "$counter" ] && on=1 off=-1
    quote on "$on"
    quote off "$off"
    echo "        [ \"\${OPTARG:-}\" ] && set -- noarg \"\$1\" && break"
    echo "        eval '[ \${OPTARG+x} ] &&:' && OPTARG=$on || OPTARG=$off"
    [ "$validate" ] && echo "        { $validate; } || return \$?"
    case $counter in
      '') code "$1" "        " "$1=\$OPTARG" "${1#:}" ;;
      * ) code "$1" "        " "$1=\$((\${$1:-0} + \$OPTARG))" "${1#:}" ;;
    esac
    echo "        ;;"
  }
  param() {
    args "$@"
    echo "        [ \$# -le 1 ] && set -- required \"\$1\" && break"
    echo "        OPTARG=\$2"
    [ "$validate" ] && echo "        { $validate; } || return \$?"
    code "$1" "        " "$1=\$OPTARG" "${1#:}"
    echo "        shift ;;"
  }
  option() {
    args "$@"
    quote default "$default"
    echo "        if [ ! \"\$OPTARG\" ]; then"
    echo "          OPTARG=$default"
    echo "          eval 'shift; set -- \"'\"\$1\"'\" \"\$OPTARG\"' \${2+'\"\$@\"'}"
    echo "        fi"
    echo "        OPTARG=\$2"
    [ "$validate" ] && echo "        { $validate; } || return \$?"
    code "$1" "        " "$1=\$OPTARG" "${1#:}"
    echo "        shift ;;"
  }
  disp() {
    args "$@"
    code "$1" "        " "echo \"\$$1\"" "${1#:}"
    echo "        exit 0 ;;"
  }

  echo "$2() {"
  echo "  OPTIND=\$((\$#+1))"
  echo "  while [ \$# -gt 0 ] && OPTARG=''; do"
  echo "    case \$1 in"
  echo "      --?*=*) OPTARG=\$1; shift"
  echo "        eval 'set -- \"\${OPTARG%%\=*}\" \"\${OPTARG#*\=}\"' \${1+'\"\$@\"'}"
  echo "        ;;"
  echo "      --no-*) unset OPTARG ;;"
  if [ "$_optargs" ]; then
    echo "      -[$_optargs]?*) OPTARG=\$1; shift"
    echo "        eval 'set -- \"\${OPTARG%\"\${OPTARG#??}\"}\" \"\${OPTARG#??}\"' \${1+'\"\$@\"'}"
    echo "        ;;"
  fi
  echo "      -[!-]?*) OPTARG=\$1; shift"
  echo "        eval 'set -- \"\${OPTARG%\"\${OPTARG#??}\"}\" \"-\${OPTARG#??}\"' \${1+'\"\$@\"'}"
  echo "        OPTARG='' ;;"
  if [ "$_plus" ]; then
    echo "      +??*) OPTARG=\$1; shift"
    echo "        eval 'set -- \"\${OPTARG%\"\${OPTARG#??}\"}\" \"+\${OPTARG#??}\"' \${1+'\"\$@\"'}"
    echo "        unset OPTARG ;;"
    echo "      +*) unset OPTARG ;;"
  fi
  echo "    esac"
  echo "    case \$1 in"
  "$@"
  echo "      --)"
  echo "        while [ \$# -gt 1 ] && shift; do"
  echo "          $_restargs=\"\$$_restargs \\\"\\\${\$((\$OPTIND-\$#))}\\\"\""
  echo "        done"
  echo "        return 0 ;;"
  echo "      [-${_plus:++}]?*) set -- unknown \"\$1\" && break ;;"
  echo "      *) $_restargs=\"\$$_restargs \\\"\\\${\$((\$OPTIND-\$#))}\\\"\""
  echo "    esac"
  echo "    shift"
  echo "  done"
  echo "  [ \$# -eq 0 ] && return 0"
  if [ "$_error" ]; then
    echo "  $_error \"\$@\" && exit 1"
  fi
  echo "  case \$1 in"
  echo "    unknown) echo \"unrecognized option '\$2'\" >&2 ;;"
  echo "    noarg) echo \"option '\$2' doesn't allow an argument\" >&2 ;;"
  echo "    required) echo \"option '\$2' requires an argument\" >&2 ;;"
  echo "  esac"
  echo "  exit 1"
  echo "}"
  echo "# End of option parser"
}

getoptions_help() {
  width="30" plus=""

  pad() {
    until [ ${#2} -ge "$3" ] && eval "$1=\$2"; do
      set -- "$1" "$2 " "$3"
    done
  }
  args() {
    _type=$1 var=$2 sw='' hide='' _width=$width
    shift 2
    while [ $# -gt 0 ]; do
      case $1 in
        -- ) shift && break ;;
        --*) pad sw "$sw${sw:+, }" $((${plus:+4} + 4)); sw="${sw}${1}" ;;
        -? ) sw="${sw}${sw:+, }${1}" ;;
        +? ) pad sw "$sw${sw:+, }" 4; sw="${sw}${1}" ;;
        *  ) eval "${1%%:*}=\"\${1#*:}\"" ;;
      esac
      shift
    done

    [ "$hide" ] && return 0
    case $_type in
      setup | mesg) prefix='' _width=0 ;;
      flag | disp) pad prefix "  $sw  " "$_width" ;;
      param) pad prefix "  $sw $var  " "$_width" ;;
      option) pad prefix "  $sw [$var]  " "$_width" ;;
    esac
    if [ ${#prefix} -le "$_width" ]; then
      prefix="${prefix}${1:-}"
      [ $# -gt 0 ] && shift
    fi
    echo "$prefix"
    pad prefix '' "$_width"
    while [ $# -gt 0 ]; do
      echo "${prefix}$1"
      shift
    done
  }
  setup() { args 'setup' - "$@"; }
  flag() { args 'flag' "$@"; }
  param() { args 'param' "$@"; }
  option() { args 'option' "$@"; }
  disp() { args 'disp' "$@"; }
  mesg() { args 'mesg' - "$@"; }

  echo "$2() {"
  echo "  cat<<GETOPTIONS_HELP"
  "$@"
  echo "GETOPTIONS_HELP"
  echo "}"
}
